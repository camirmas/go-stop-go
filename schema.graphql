# Types
directive @hasAuth on FIELD_DEFINITION

scalar Timestamp

enum GameType {
    STANDARD
}

enum GameState {
    NEGOTIATION
    IN_PROGRESS
    FINISHED
}

enum GameUserEdgeType {
    OWNER
    PLAYER
}

enum Event {
    CREATE
    UPDATE
    DELETE
}

interface Node {
    id: ID!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type Identity implements Node {
    id: ID!
    email: String!
    user: User!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type User implements Node {
    id: ID!
    name: String!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type Game implements Node {
    id: ID!
    type: GameType!
    state: GameState!
    boardSize: Int!
    createdAt: Timestamp!
    updatedAt: Timestamp
    users: [GameUserEdge!]
}

type MatchmakingRequest implements Node {
    id: ID!
    queue: String!
    user: User
    rank: Int!
    delta: Int!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

# Relationships
type GameUserEdge {
    index: Int!
    user: User!
    type: GameUserEdgeType!
}

input CreateMatchmakingRequestInput {
    delta: Int!
}

type CreateMatchmakingRequestPayload {
    request: MatchmakingRequest
}

type MatchmakingRequestCompletionPayload {
    game: Game!
}

type Query {
    game(id: ID): Game
    games(ids: [ID!], states: [GameState!]): [Game]
    user(id: ID, name: String): User
    users(ids: [ID!], names: [String!]): [User]
    viewer: Identity @hasAuth
    matchmakingRequests: [MatchmakingRequest!]
}

type Mutation {
    createMatchmakingRequest(input: CreateMatchmakingRequestInput!): CreateMatchmakingRequestPayload! @hasAuth
}

type Subscription {
    matchmakingRequestCompletions: MatchmakingRequestCompletionPayload
}
