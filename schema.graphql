# Types
scalar Timestamp

enum GameType {
    STANDARD
}

enum GameState {
    INVITATION
    IN_PROGRESS
    FINISHED
}

interface Node {
    id: ID!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type Identity implements Node {
    id: ID!
    email: String!
    user: User!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type User implements Node {
    id: ID!
    name: String!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

type Game implements Node {
    id: ID!
    type: GameType!
    state: GameState!
    boardSize: Int!
    createdAt: Timestamp!
    updatedAt: Timestamp
}

# Inputs
input CreateIdentityInput {
    email: String!
    password: String!
    name: String!
}

input CreateGameInvitationInput {
    type: GameType!
    boardSize: Int!
}

type Query {
    user(id: ID, name: String): User
    users(ids: [ID!], names: [String!]): [User]
}

type Mutation {
    createIdentity(input: CreateIdentityInput): Identity
    createGameInvitation(input: CreateGameInvitationInput): Game
}
